AWSTemplateFormatVersion: '2010-09-09'
Description: 'SaaS Control Plain template'

Parameters:
  SystemName:
    Type: String
    Default: devops-saas-cloudformation-0603
    Description: 'Prefix for all resources'

  SystemNameNoDate:
    Type: String
    Default: devops-saas-cloudformation
    Description: 'Prefix for all resources'

Resources:

  DevopsSaasEksRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${SystemName}-eks-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-eks-role'

  DevOpsSaasEKSNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub '${SystemName}-eks-node-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-eks-node-role'

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-vpc'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PublicSubnet2'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PrivateSubnet2'

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-NatGatewayEIP'

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-NatGateway'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemName}-PrivateRouteTable'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  VPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub '${SystemName}-eks-cluster'
      Version: '1.29'
      RoleArn: !GetAtt DevopsSaasEksRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
        PublicAccessCidrs:
          - '0.0.0.0/0'  # 모든 IP에서 접근 가능 (필요에 따라 제한)
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: '172.20.0.0/16'
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: 'api'
            - Type: 'audit'
            - Type: 'authenticator'

  ManagementNodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub '${SystemNameNoDate}-ManagementNodeGroup'
      NodeRole: !GetAtt DevOpsSaasEKSNodeRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 2
      Labels:
        node-type: management
      DiskSize: 20
      InstanceTypes: ['t3.medium']
      AmiType: 'AL2_x86_64'
      CapacityType: 'SPOT'
      Tags:
        - Key: Type
          Value: 'Control-Plain'
        - Key: Name
          Value: !Sub '${SystemNameNoDate}-ManagementNodeGroup'

  KubeProxyAddOn:
    Type: 'AWS::EKS::Addon'
    Properties:
      AddonName: 'kube-proxy'
      ClusterName: !Ref EKSCluster
      AddonVersion: 'v1.29.3-eksbuild.2'
      ResolveConflicts: 'OVERWRITE'

  VPCCNIAddOn:
    Type: 'AWS::EKS::Addon'
    Properties:
      AddonName: 'vpc-cni'
      ClusterName: !Ref EKSCluster
      AddonVersion: 'v1.18.1-eksbuild.3'
      ResolveConflicts: 'OVERWRITE'
    DependsOn: KubeProxyAddOn

  CoreDNSAddOn:
    Type: 'AWS::EKS::Addon'
    Properties:
      AddonName: 'coredns'
      ClusterName: !Ref EKSCluster
      AddonVersion: 'v1.11.1-eksbuild.9'
      ResolveConflicts: 'OVERWRITE'
    DependsOn: ApplicationNodeGroup

  CloudWatchObservabilityAddOn:
    Type: 'AWS::EKS::Addon'
    Properties:
      AddonName: 'amazon-cloudwatch-observability'
      ClusterName: !Ref EKSCluster
      AddonVersion: 'v1.6.0-eksbuild.1'
      ResolveConflicts: 'OVERWRITE'
    DependsOn: ManagementNodeGroup

  EBSCSIAddOn:
    Type: 'AWS::EKS::Addon'
    Properties:
      AddonName: 'aws-ebs-csi-driver'
      ClusterName: !Ref EKSCluster
      AddonVersion: 'v1.31.0-eksbuild.1'
      ResolveConflicts: 'OVERWRITE'
    DependsOn: ManagementNodeGroup

Outputs:
  EksClusterRole:
    Description: 'EKS Cluster Role Name'
    Value: !Ref DevopsSaasEksRole
  EksClusterNodeRole:
    Description: 'EKS Cluster Node group Role Name'
    Value: !Ref DevOpsSaasEKSNodeRole
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: 'Public Subnet 1 ID'
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: 'Public Subnet 2 ID'
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: 'Private Subnet 1 ID'
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: 'Private Subnet 2 ID'
    Value: !Ref PrivateSubnet2
  InternetGatewayId:
    Description: 'Internet Gateway ID'
    Value: !Ref InternetGateway
  NatGatewayId:
    Description: 'NAT Gateway ID'
    Value: !Ref NatGateway
  VPCEndpointId:
    Description: 'VPC Endpoint ID'
    Value: !Ref VPCEndpoint
  EKSClusterName:
    Description: 'The name of the EKS cluster'
    Value: !Ref EKSCluster
  EKSClusterEndpoint:
    Description: 'The endpoint for the EKS cluster'
    Value: !GetAtt EKSCluster.Endpoint
  EKSClusterArn:
    Description: 'The ARN of the EKS cluster'
    Value: !GetAtt EKSCluster.Arn
  ManagementNodeGroupName:
    Description: 'The name of the first EKS node group'
    Value: !Ref ManagementNodeGroup
  ApplicationNodeGroupName:
    Description: 'The name of the second EKS node group'
    Value: !Ref ApplicationNodeGroup